(ns auth.screen
  (:require-macros
    [hoplon.core :refer [with-init! defelem]]
    [javelin.core :refer [defc defc= cell=]]
    [compile-time-config :refer [env]])
  (:require
    [hoplon.core :refer :all]
    [hoplon.storage-atom :refer [local-storage]]
    [javelin.core :refer [cell]]
    [castra.core :refer [mkremote]]
    [clojure.string :as str]
    [cljsjs.auth0-lock]
    [cljs.pprint :refer [pprint]]))

(defn pp-str [x] (with-out-str (pprint x)))
(defn as-clj [x] (js->clj x :keywordize-keys true))

(def route (route-cell "#/"))

(def got-authorized?
  (cell= (not (str/starts-with? route "#/"))))

(def lock (js/Auth0Lock. (env :auth0-client-id)
                         (subs (env :auth0-url) 8)))

(defn parse-hash [lock hash]
  (as-clj (.parseHash lock hash)))

(def id-token (-> (cell nil) (local-storage 'id_token)))
; FIXME To avoid escaping within formula cells we can have a function
; which implicitly depends on the id-token cell
(defn reset-id-token [v] (reset! id-token v))

(def authorized? (cell= id-token))
(def unauthorized? (cell= (not id-token)))

; GotAuthorized phase
(cell=
  (when got-authorized?
    (reset-id-token (-> (parse-hash lock route) :id_token))))

(defn get-profile [lock id-token profile-cell]
  (let [store-profile (fn [err profile]
                        (reset! profile-cell (as-clj profile)))]
    (.getProfile lock id-token store-profile)))

(def user-profile (cell {}))

(defn get-user-profile []
  (get-profile lock @id-token user-profile))

; Authorized phase triggers getting the user profile
(cell=
  (when authorized?
    (get-user-profile)))

(defn auth0-login-url [config]
  (when-let [{:keys [auth0-url auth0-client-id auth0-redirect-uri]} config]
    (str auth0-url "/authorize/"
         "?response_type=token"
         "&client_id=" auth0-client-id
         "&redirect_uri=" auth0-redirect-uri
         "&state="
         "&scope=openid")))

(def auth0-callback-url-example
  (str "http://localhost:9000/#"
       "access_token=NtWQsC2c8udqlurh&"
       "id_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9."
       "eyJfaWQiOiI2MDFlMDk1N2I5MWM2MGZiMmU3NDVkZjZhMmIyMTc0NCIsImdpdmVuX25hbWUiOiJIZW5yeSIsImZhbWlseV9uYW1lIjoiTGl1IiwiZW1haWwiOiJoZW5yeUBleGljb24ubW9iaSIsImNsaWVudElEIjoiVzZxOFUxeGl0ckR6QzhLa29sVE5YQnkwWEhTVkRVV0ciLCJ1cGRhdGVkX2F0IjoiMjAxNi0wMy0wMVQwOToyMToxNS42ODlaIiwicGljdHVyZSI6Imh0dHBzOi8vcy5ncmF2YXRhci5jb20vYXZhdGFyL2U5MTM0YjMwMDUzM2FmZTgzMjY4MzE5MzFmYTUzYWI3P3M9NDgwJnI9cGcmZD1odHRwcyUzQSUyRiUyRmNkbi5hdXRoMC5jb20lMkZhdmF0YXJzJTJGaGwucG5nIiwidXNlcl9pZCI6ImF1dGgwfDUxNTE2ZDUxYTQ2NTg1N2IyZDAwMDFmNyIsIm5hbWUiOiJoZW5yeUBleGljb24ubW9iaSIsIm5pY2tuYW1lIjoiaGVucnkiLCJpZGVudGl0aWVzIjpbeyJ1c2VyX2lkIjoiNTE1MTZkNTFhNDY1ODU3YjJkMDAwMWY3IiwicHJvdmlkZXIiOiJhdXRoMCIsImNvbm5lY3Rpb24iOiJiYXQtbW9uZ29kYiIsImlzU29jaWFsIjpmYWxzZX1dLCJjcmVhdGVkX2F0IjoiMjAxNi0wMy0wMVQwMzoyODo0OC4wNDZaIiwiZ2xvYmFsX2NsaWVudF9pZCI6ImIzVGd3MTVqdHdJcnZnZldoVlp6QXg3TlVqaDFmM29wIiwiaXNzIjoiaHR0cHM6Ly9leGljb24tZGV2LmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw1MTUxNmQ1MWE0NjU4NTdiMmQwMDAxZjciLCJhdWQiOiJXNnE4VTF4aXRyRHpDOEtrb2xUTlhCeTBYSFNWRFVXRyIsImV4cCI6MTQ1NjkxMDQ3NSwiaWF0IjoxNDU2ODI0MDc1fQ."
       "7DT6qKeuGEhy7ZsFkWTGytgXToMw01mLQGF9DvMi3XA&"
       "token_type=Bearer"))

(defn show-auth0-lock []
  (.show lock (clj->js {})))

(defelem user-elem [{:keys [profile]} _]
  (cell-let
    [{:keys [picture name email]} profile]
    (div :style "display: flex; align-items: center;"
         (img :src picture
              :style "width: 50px; height: auto;")
         (div
           (span name) (br)
           (span email)))))

(defn content []
  (div :class "pure-g"
       (div :class "pure-u-1"
            (h1 "Auth index page")

            (div :toggle unauthorized?
                 (a :class "pure-button pure-button-active"
                    :href (auth0-login-url
                            {:auth0-url          (env :auth0-url)
                             :auth0-client-id    (env :auth0-client-id)
                             :auth0-redirect-uri (env :auth0-redirect-uri)})
                    "Login page hosted by Auth0")

                 (span :html "&nbsp;")

                 (button :class "pure-button pure-button-active"
                         :click show-auth0-lock
                         "Show Auth0 Lock login/signup dialog")

                 (span :html "&nbsp;"))

            (button :class "pure-button"
                    :toggle authorized?
                    :click #(reset-id-token nil)
                    "Log out")

            (div :toggle got-authorized?
                 (button :class "pure-button"
                         :click #(set! js/window.location.hash "#/")
                         "Continue to the application"))

            (div :toggle authorized?
                 (h2 "Current user")
                 (user-elem :profile user-profile)

                 (h3 "JWT decoded by Auth0 Lock")
                 (pre (cell= (pp-str (parse-hash lock route))))

                 (h3 "User profile requested from Auth0 API via Lock")

                 (pre (cell= (pp-str user-profile)))

                 (div :id "auth0-lock-container")))))
